{"version":3,"sources":["components/Header.js","components/Search.js","components/Item.js","components/Results.js","components/Container.js","App.js","index.js"],"names":["Header","className","Search","props","type","placeholder","onChange","e","target","value","Item","useState","fadeIn","setFadeIn","title","onClick","setTimeout","symbol","keywords","id","Results","useEffect","clipboard","Clipboard","destroy","emojiFiltered","slice","map","emoji","uuidv4","Container","emojiData","setEmojiData","newEmojiData","setNewEmojiData","searchQuery","setSearchQuery","data","val","toLowerCase","queryKeywords","trim","split","newEmojis","queryLength","length","queryLengthSum","console","log","forEach","item","removeDuplicates","Set","query","keyword","indexOf","push","App","ReactDOM","render","document","getElementById"],"mappings":"qvsKAgBeA,MAdf,WAEE,OACE,sBAAKC,UAAU,SAAf,UACE,8CAGA,kF,MCOSC,MAdf,SAAgBC,GAId,OACE,uBACEF,UAAU,SACVG,KAAK,OACLC,YAAY,yBACZC,SARa,SAAAC,GACfJ,EAAMG,SAASC,EAAEC,OAAOC,W,MCwBbC,MAzBf,SAAcP,GACZ,MAA4BQ,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAOA,OACE,sBAEEZ,UAAU,OACVa,MAAM,uCACNC,QAVgB,SAAAR,GAClBM,GAAU,GACVG,YAAW,kBAAMH,GAAU,KAAQ,MASjC,sBAAqBV,EAAMc,OAC3B,gBAAed,EAAMe,SANvB,UAQE,qBAAKjB,UAAS,oBAAeW,EAAO,aAAa,eAAjD,qBAGA,sBAAMX,UAAU,aAAhB,SAA8BE,EAAMc,WAV/Bd,EAAMgB,K,8BCUFC,MAjBf,SAAiBjB,GAQf,OAPAkB,qBAAU,WACR,IAAMC,EAAY,IAAIC,IAAU,SAChC,OAAO,WACHD,EAAUE,cAKd,qBAAKvB,UAAU,UAAf,SACGE,EAAMsB,cAAcC,MAAM,EAAG,KAAKC,KAAI,SAACC,GAAD,OACrC,cAAC,EAAD,CAAMT,GAAIU,cAAUZ,OAAQW,EAAMX,OAAQH,MAAOc,EAAMd,MAAOI,SAAUU,EAAMV,UAAeW,qB,aC0CtFC,MApDf,WACE,MAAkCnB,mBAAS,IAA3C,mBAAOoB,EAAP,KAAkBC,EAAlB,KACA,EAAwCrB,mBAAS,IAAjD,mBAAOsB,EAAP,KAAqBC,EAArB,KACA,EAAsCvB,mBAAS,IAA/C,mBAAOwB,EAAP,KAAoBC,EAApB,KAwCA,OAtCAf,qBAAU,WACRW,EAAaK,KACZ,IAqCD,sBAAKpC,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQK,SAtCK,SAAAgC,GACfF,EAAeE,EAAIC,eAEnB,IAAIC,EAAgBF,EAAIC,cAAcE,OAAOC,MAAM,KAE/CC,EAAY,GAEZC,EAAcJ,EAAcK,OAE5BC,EAAiB,EAErBC,QAAQC,IAAI,0BAGc,KAAtBV,EAAIC,eACNR,EAAUkB,SAAQ,SAACC,GACjB,IAAIC,EAAgB,YAAO,IAAIC,IAAIF,EAAKhC,SAASuB,OAAOC,MAAM,OAC9DI,EAAiB,EACjBN,EAAcS,SAAQ,SAACI,GACrBF,EAAiBF,SAAQ,SAAAK,GACnBA,EAAQC,QAAQF,IAAU,GAC5BP,UAKFF,GAAeE,GACjBH,EAAUa,KAAKN,MAMrBhB,EAAgBS,MAMd,cAAC,EAAD,CAASlB,cAA+B,KAAhBU,EAAqBJ,EAAYE,QC9ChDwB,MANf,WACE,OACE,cAAC,EAAD,K,MCCJC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3992a626.chunk.js","sourcesContent":["import './Header.css'\n\nfunction Header() {\n  \n  return (\n    <div className=\"header\">\n      <h1>\n        Emoji Search\n      </h1>\n      <p>\n        A simple emoji search tool made with ReactJS.\n      </p>\n    </div>\n  )\n}\n\nexport default Header\n","import './Search.css'\n\nfunction Search(props) {\n  const onChange = e => {\n    props.onChange(e.target.value)\n  }\n  return (\n    <input\n      className=\"search\"\n      type=\"text\"\n      placeholder=\"Search from emoji name\"\n      onChange={onChange}\n    />\n  )\n}\n\nexport default Search\n","import { useState } from 'react';\nimport './Item.css'\n\nfunction Item(props) {\n  const [fadeIn, setFadeIn] = useState(false);\n\n  const handleClick = e => {\n    setFadeIn(true)\n    setTimeout(() => setFadeIn(false), 900)\n  }\n\n  return (\n    <div\n      key={props.id}\n      className=\"item\"\n      title=\"Copy Emoji to Clipboard ðŸ“‹\"\n      onClick={handleClick}\n      data-clipboard-text={props.symbol}\n      data-keywords={props.keywords}\n    >\n      <div className={`item-copy ${fadeIn?'label-true':'label-false'}`}>\n        Copied!\n      </div>\n      <span className=\"item-emoji\">{props.symbol}</span>\n    </div>\n  )\n}\n\nexport default Item\n","import { useEffect } from 'react';\nimport Item from './Item.js'\nimport Clipboard from \"clipboard\";\nimport { v4 as uuidv4 } from 'uuid';\nimport './Results.css'\n\nfunction Results(props) {\n  useEffect(() => {\n    const clipboard = new Clipboard(\".item\");\n    return () => {\n        clipboard.destroy();\n    };\n  })\n\n  return (\n    <div className=\"results\">\n      {props.emojiFiltered.slice(0, 100).map((emoji) => (\n        <Item id={uuidv4()} symbol={emoji.symbol} title={emoji.title} keywords={emoji.keywords} key={uuidv4()}/>\n\t\t\t))}\n    </div>\n  )\n}\n\nexport default Results\n","import { useState, useEffect } from 'react';\nimport Header from './Header.js'\nimport Search from './Search.js'\nimport Results from './Results.js'\nimport data from '../json/data.json'\nimport './Container.css'\n\nfunction Container() {\n  const [emojiData, setEmojiData] = useState([]);\n  const [newEmojiData, setNewEmojiData] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    setEmojiData(data);\n  }, [])\n  const onChange = val => {\n    setSearchQuery(val.toLowerCase());\n\n    let queryKeywords = val.toLowerCase().trim().split(\" \");\n\n    let newEmojis = []\n\n    let queryLength = queryKeywords.length;\n\n    let queryLengthSum = 0;\n\n    console.log(\"\\n\\n\\n NEW LINE \\n\\n\\n\")\n\n\n    if (val.toLowerCase() !== \"\") {\n      emojiData.forEach((item) => {\n        let removeDuplicates = [...new Set(item.keywords.trim().split(\" \"))];\n        queryLengthSum = 0;\n        queryKeywords.forEach((query) => {\n          removeDuplicates.forEach(keyword => {\n            if (keyword.indexOf(query) >= 0) {\n              queryLengthSum++;\n            }\n          })\n        })\n  \n        if (queryLength <= queryLengthSum) {\n          newEmojis.push(item)\n        }\n  \n      })\n    }\n\n    setNewEmojiData(newEmojis)\n  }\n  return (\n    <div className=\"container\">\n      <Header />\n      <Search onChange={onChange} />\n      <Results emojiFiltered={searchQuery === \"\" ? emojiData : newEmojiData} />\n    </div>\n  )\n}\n\nexport default Container","import Container from './components/Container'\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}